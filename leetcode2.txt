Two non-empty linked lists are given to represent two non-negative integers. Among them, their respective digits are stored in reverse order, and each node of them can only store one digit.

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {    
         if (l1 == null) {
             return l2;
         }else if (l2 == null) {
             return l1;
         }
         ListNode dummyHead = new ListNode(-1);
         int longer = 0;
         ListNode t1 = l1;
         ListNode t2 = l2;
         while (true) {
             if ((t1 == null && t2 == null) || (t1 !=null && t2 == null)) {
                 longer = 1;
                 break;
             }else if (t1 == null && t2 != null) {
                 longer = 2;
                 break;
             }
             t1= t1.next;
             t2 = t2.next;
         }
         if (longer == 1) {
             dummyHead.next = l1;
         }else {
             dummyHead.next = l2;
             l2 = l1;
         }
         ListNode temp = dummyHead.next;
         int value = 0;
         while (temp != null) {
             if (l2 != null) {
                 int sum = value + temp.val + l2.val;
                 if (sum >= 10) {
                     temp.val = sum % 10;
                     value = 1;
                 }else {
                     temp.val = sum;
                     value = 0;
                 }
                 l2 = l2.next;
             }else {
                 int sum = value + temp.val;
                 if (sum >= 10) {
                     temp.val = sum % 10;
                     value = 1;
                 }else {
                     temp.val = sum;
                     value = 0;
                 }
             }
             if (temp.next == null) {
                 break;
             }
             temp = temp.next;
         }
         if (value == 1) {
             ListNode newNode = new ListNode(value);
             temp.next = newNode;
         }
         return dummyHead.next;
    }
}
